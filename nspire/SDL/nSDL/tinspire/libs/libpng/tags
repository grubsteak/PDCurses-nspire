!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AR	Makefile	/^AR = arm-none-eabi-ar$/;"	m
CHECK	pngconf.h	1452;"	d
CVT_PTR	pngconf.h	1454;"	d
CVT_PTR	pngconf.h	1466;"	d
CVT_PTR	pngconf.h	1476;"	d
CVT_PTR_NOCHECK	pngconf.h	1455;"	d
CVT_PTR_NOCHECK	pngconf.h	1467;"	d
CVT_PTR_NOCHECK	pngconf.h	1477;"	d
DISTDIR	Makefile	/^DISTDIR = .$/;"	m
FAR	pngconf.h	1164;"	d
FAR	pngconf.h	1193;"	d
FARDATA	pngconf.h	1186;"	d
FARDATA	pngconf.h	1198;"	d
GCC	Makefile	/^GCC = nspire-gcc$/;"	m
GCCFLAGS	Makefile	/^GCCFLAGS = -Os -Wall -W -nostdlib -s -I..\/libz\/$/;"	m
LDATA	pngconf.h	1155;"	d
LDATA	pngconf.h	1157;"	d
MACOS	pngconf.h	347;"	d
MIN	pngrio.c	72;"	d	file:
NEAR_BUF_SIZE	pngrio.c	71;"	d	file:
NOCHECK	pngconf.h	1453;"	d
OBJCOPY	Makefile	/^	OBJCOPY := arm-none-eabi-objcopy$/;"	m
OBJCOPY	Makefile	/^OBJCOPY := "$(shell which arm-elf-objcopy 2>\/dev\/null)"$/;"	m
OBJS	Makefile	/^OBJS = png.o pngerror.o pngget.o pngmem.o \\$/;"	m
PNGAPI	pngconf.h	1269;"	d
PNGAPI	pngconf.h	1270;"	d
PNGAPI	pngconf.h	1277;"	d
PNGAPI	pngconf.h	1297;"	d
PNGAPI	pngconf.h	1299;"	d
PNGAPI	pngconf.h	1339;"	d
PNGAPI	pngconf.h	1348;"	d
PNGARG	pngconf.h	327;"	d
PNGARG	pngconf.h	331;"	d
PNGARG	pngconf.h	333;"	d
PNGCONF_H	pngconf.h	23;"	d
PNGPRIV_H	pngpriv.h	26;"	d
PNG_16_TO_8	pngpriv.h	112;"	d
PNG_ABORT	pngconf.h	1444;"	d
PNG_ABORT	pngconf.h	1446;"	d
PNG_ADD_ALPHA	pngpriv.h	127;"	d
PNG_AFTER_IDAT	png.h	2709;"	d
PNG_AFTER_IDAT	pngpriv.h	89;"	d
PNG_ALIGNED_MEMORY_SUPPORTED	pngconf.h	155;"	d
PNG_ALLOCATED	pngconf.h	1393;"	d
PNG_ALLOCATED	pngconf.h	1428;"	d
PNG_ALL_FILTERS	png.h	1869;"	d
PNG_ALL_MNG_FEATURES	png.h	1092;"	d
PNG_ALWAYS_EXTERN	pngpriv.h	69;"	d
PNG_BACKGROUND	pngpriv.h	109;"	d
PNG_BACKGROUND_EXPAND	pngpriv.h	110;"	d
PNG_BACKGROUND_GAMMA_FILE	png.h	1728;"	d
PNG_BACKGROUND_GAMMA_SCREEN	png.h	1727;"	d
PNG_BACKGROUND_GAMMA_UNIQUE	png.h	1729;"	d
PNG_BACKGROUND_GAMMA_UNKNOWN	png.h	1726;"	d
PNG_BACKGROUND_IS_GRAY	pngpriv.h	97;"	d
PNG_BGR	pngpriv.h	102;"	d
PNG_BUILD_DLL	pngconf.h	226;"	d
PNG_CALLOC_SUPPORTED	pngconf.h	176;"	d
PNG_CHECK_cHRM_SUPPORTED	pngconf.h	150;"	d
PNG_COLOR_DIST	pngpriv.h	189;"	d
PNG_COLOR_MASK_ALPHA	png.h	920;"	d
PNG_COLOR_MASK_COLOR	png.h	919;"	d
PNG_COLOR_MASK_PALETTE	png.h	918;"	d
PNG_COLOR_TYPE_GA	png.h	930;"	d
PNG_COLOR_TYPE_GRAY	png.h	923;"	d
PNG_COLOR_TYPE_GRAY_ALPHA	png.h	927;"	d
PNG_COLOR_TYPE_PALETTE	png.h	924;"	d
PNG_COLOR_TYPE_RGB	png.h	925;"	d
PNG_COLOR_TYPE_RGBA	png.h	929;"	d
PNG_COLOR_TYPE_RGB_ALPHA	png.h	926;"	d
PNG_COMPRESSION_TYPE_BASE	png.h	933;"	d
PNG_COMPRESSION_TYPE_DEFAULT	png.h	934;"	d
PNG_CONSOLE_IO_SUPPORTED	pngconf.h	314;"	d
PNG_CONST	pngconf.h	466;"	d
PNG_CONST	pngconf.h	468;"	d
PNG_CONVERT_tIME_NOT_SUPPORTED	pngconf.h	28;"	d
PNG_CONVERT_tIME_SUPPORTED	pngconf.h	1073;"	d
PNG_COST_FACTOR	pngpriv.h	143;"	d
PNG_COST_SHIFT	pngpriv.h	142;"	d
PNG_CRC_DEFAULT	png.h	1837;"	d
PNG_CRC_ERROR_QUIT	png.h	1838;"	d
PNG_CRC_NO_CHANGE	png.h	1842;"	d
PNG_CRC_QUIET_USE	png.h	1841;"	d
PNG_CRC_WARN_DISCARD	png.h	1839;"	d
PNG_CRC_WARN_USE	png.h	1840;"	d
PNG_DEBUG	pngconf.h	286;"	d
PNG_DEBUG_FILE	pngpriv.h	869;"	d
PNG_DEPRECATED	pngconf.h	1401;"	d
PNG_DEPRECATED	pngconf.h	1419;"	d
PNG_DEPSTRUCT	png.h	/^     png_charp current_text PNG_DEPSTRUCT;         \/* current text chunk$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^     png_charp current_text_ptr PNG_DEPSTRUCT;     \/* current location$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^     png_size_t current_text_left PNG_DEPSTRUCT;   \/* how much text left$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^     png_size_t current_text_size PNG_DEPSTRUCT;   \/* current size of$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   double scal_pixel_height PNG_DEPSTRUCT;   \/* height of one pixel *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   double scal_pixel_width PNG_DEPSTRUCT;    \/* width of one pixel *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   float background_gamma PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   float gamma PNG_DEPSTRUCT;          \/* file gamma value *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   float gamma PNG_DEPSTRUCT; \/* gamma value of image,$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   float screen_gamma PNG_DEPSTRUCT;   \/* screen gamma value$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   float x_blue PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   float x_green PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   float x_red PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   float x_white PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   float y_blue PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   float y_green PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   float y_red PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   float y_white PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   int cur_palette PNG_DEPSTRUCT;                  \/* current push library$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   int gamma_shift PNG_DEPSTRUCT;      \/* number of "insignificant" bits$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   int max_text PNG_DEPSTRUCT; \/* current size of text array *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   int num_chunk_list PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   int num_text PNG_DEPSTRUCT; \/* number of comments read\/to write *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   int process_mode PNG_DEPSTRUCT;                 \/* what push library$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   int zlib_level PNG_DEPSTRUCT;            \/* holds zlib compression level *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   int zlib_mem_level PNG_DEPSTRUCT;        \/* holds zlib compression memory$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   int zlib_method PNG_DEPSTRUCT;           \/* holds zlib compression method *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   int zlib_strategy PNG_DEPSTRUCT;         \/* holds zlib compression$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   int zlib_window_bits PNG_DEPSTRUCT;      \/* holds zlib compression window$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   jmp_buf jmpbuf PNG_DEPSTRUCT;            \/* used in png_error *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_alloc_size_t user_chunk_malloc_max PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte background_gamma_type PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte bit_depth PNG_DEPSTRUCT;        \/* bit depth of file *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte bit_depth PNG_DEPSTRUCT;      \/* 1, 2, 4, 8, or 16 bits\/channel$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_byte channels PNG_DEPSTRUCT;         \/* number of channels in file *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte channels PNG_DEPSTRUCT;       \/* number of data channels per$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_byte chunk_name[5] PNG_DEPSTRUCT;    \/* null-terminated name of current$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte color_type PNG_DEPSTRUCT;       \/* color type of file *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte color_type PNG_DEPSTRUCT;     \/* see PNG_COLOR_TYPE_ below$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_byte compression PNG_DEPSTRUCT;      \/* file compression type$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte compression_type PNG_DEPSTRUCT; \/* must be$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_byte compression_type PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte do_filter PNG_DEPSTRUCT;        \/* row filter flags (see$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte filter PNG_DEPSTRUCT;           \/* file filter type (always 0) *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte filter_type PNG_DEPSTRUCT;    \/* must be PNG_FILTER_TYPE_BASE$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_byte filter_type PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte heuristic_method PNG_DEPSTRUCT;        \/* heuristic for row$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte iccp_compression PNG_DEPSTRUCT; \/* Always zero *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_byte interlace_type PNG_DEPSTRUCT; \/* One of PNG_INTERLACE_NONE,$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_byte interlaced PNG_DEPSTRUCT;       \/* PNG_INTERLACE_NONE,$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte num_prev_filters PNG_DEPSTRUCT;        \/* number of weights$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte offset_unit_type PNG_DEPSTRUCT; \/* offset units type *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_byte pass PNG_DEPSTRUCT;             \/* current interlace pass (0 - 6) *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte pcal_nparams PNG_DEPSTRUCT;   \/* number of parameters given$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_byte pcal_type PNG_DEPSTRUCT;      \/* equation type$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_byte phys_unit_type PNG_DEPSTRUCT; \/* resolution type (see$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_byte pixel_depth PNG_DEPSTRUCT;      \/* number of bits per pixel *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte pixel_depth PNG_DEPSTRUCT;    \/* number of bits per pixel *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_byte rgb_to_gray_status PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte scal_unit PNG_DEPSTRUCT;         \/* unit of physical scale *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_byte sig_bytes PNG_DEPSTRUCT;        \/* magic bytes read\/written from$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte signature[8] PNG_DEPSTRUCT;   \/* magic bytes read by libpng$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_byte spare_byte PNG_DEPSTRUCT;     \/* to align the data, and for$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_byte srgb_intent PNG_DEPSTRUCT; \/* sRGB rendering intent$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_byte user_transform_channels PNG_DEPSTRUCT; \/* channels in user$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte user_transform_depth PNG_DEPSTRUCT;    \/* bit depth of user$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte usr_bit_depth PNG_DEPSTRUCT;    \/* bit depth of users row *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_byte usr_channels PNG_DEPSTRUCT;     \/* channels at start of write *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep avg_row PNG_DEPSTRUCT;         \/* buffer to save "avg" row$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep big_row_buf PNG_DEPSTRUCT;         \/* buffer to save current$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep chunk_list PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep current_buffer PNG_DEPSTRUCT;         \/* buffer for recently$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep current_buffer_ptr PNG_DEPSTRUCT;     \/* current location in$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep gamma_from_1 PNG_DEPSTRUCT;    \/* converts from 1.0 to screen *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep gamma_table PNG_DEPSTRUCT;     \/* gamma table for 8-bit$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep gamma_to_1 PNG_DEPSTRUCT;      \/* converts from file to 1.0 *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep index_to_palette PNG_DEPSTRUCT;       \/* where the original$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep offset_table PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep paeth_row PNG_DEPSTRUCT;       \/* buffer to save "Paeth" row$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep palette_lookup PNG_DEPSTRUCT; \/* lookup table for quantizing *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep palette_to_index PNG_DEPSTRUCT;       \/* which original index$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep prev_filters PNG_DEPSTRUCT;           \/* filter type(s) of$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep prev_row PNG_DEPSTRUCT;        \/* buffer to save previous$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep quantize_index PNG_DEPSTRUCT; \/* index translation for palette$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep quantize_sort PNG_DEPSTRUCT;          \/* working sort array *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep row_buf PNG_DEPSTRUCT;         \/* buffer to save current$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep save_buffer PNG_DEPSTRUCT;            \/* buffer for previously$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep save_buffer_ptr PNG_DEPSTRUCT;        \/* current location in$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep sub_row PNG_DEPSTRUCT;         \/* buffer to save "sub" row$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep trans_alpha PNG_DEPSTRUCT;           \/* alpha values for$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep trans_alpha PNG_DEPSTRUCT;    \/* alpha values for paletted$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_bytep up_row PNG_DEPSTRUCT;          \/* buffer to save "up" row$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytep zbuf PNG_DEPSTRUCT;            \/* buffer for zlib *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytepp offset_table_ptr PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_bytepp row_pointers PNG_DEPSTRUCT;        \/* the image bits *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_charp iccp_name PNG_DEPSTRUCT;     \/* profile name *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_charp iccp_profile PNG_DEPSTRUCT;  \/* International Color Consortium$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_charp pcal_purpose PNG_DEPSTRUCT;  \/* pCAL chunk description string *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_charp pcal_units PNG_DEPSTRUCT;    \/* Latin-1 string giving physical$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_charp scal_s_height PNG_DEPSTRUCT;    \/* string containing width *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_charp scal_s_width PNG_DEPSTRUCT;     \/* string containing height *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_charp time_buffer PNG_DEPSTRUCT; \/* String to hold RFC 1123 time text *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_charpp pcal_params PNG_DEPSTRUCT;  \/* ASCII strings containing$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_color_16 background PNG_DEPSTRUCT;   \/* background color in$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_color_16 background PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_color_16 background_1 PNG_DEPSTRUCT; \/* background normalized$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_color_16 trans_color PNG_DEPSTRUCT;  \/* transparent color for$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_color_16 trans_color PNG_DEPSTRUCT; \/* transparent color for$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_color_8 shift PNG_DEPSTRUCT;         \/* shift for significant bit$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_color_8 sig_bit PNG_DEPSTRUCT;       \/* significant bits in each$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_color_8 sig_bit PNG_DEPSTRUCT; \/* significant bits in color channels *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_colorp palette PNG_DEPSTRUCT;        \/* palette from the input file *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_colorp palette PNG_DEPSTRUCT;      \/* array of color values$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_error_ptr error_fn PNG_DEPSTRUCT;    \/* function for printing$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_error_ptr warning_fn PNG_DEPSTRUCT;  \/* function for printing$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_fixed_point int_gamma PNG_DEPSTRUCT; \/* gamma of image,$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_fixed_point int_gamma PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_fixed_point int_x_blue PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_fixed_point int_x_green PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_fixed_point int_x_red PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_fixed_point int_x_white PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_fixed_point int_y_blue PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_fixed_point int_y_green PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_fixed_point int_y_red PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_fixed_point int_y_white PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_flush_ptr output_flush_fn PNG_DEPSTRUCT; \/* Function for flushing$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_free_ptr free_fn PNG_DEPSTRUCT;          \/* function for$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_int_32 pcal_X0 PNG_DEPSTRUCT;      \/* minimum value *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_int_32 pcal_X1 PNG_DEPSTRUCT;      \/* maximum value *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_int_32 x_offset PNG_DEPSTRUCT; \/* x offset on page *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_int_32 y_offset PNG_DEPSTRUCT; \/* y offset on page *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_longjmp_ptr longjmp_fn PNG_DEPSTRUCT;\/* setjmp non-local goto$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_malloc_ptr malloc_fn PNG_DEPSTRUCT;      \/* function for$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_progressive_end_ptr end_fn PNG_DEPSTRUCT;   \/* called after image$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_progressive_info_ptr info_fn PNG_DEPSTRUCT; \/* called after header$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_progressive_row_ptr row_fn PNG_DEPSTRUCT;   \/* called after each$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_read_status_ptr read_row_fn PNG_DEPSTRUCT;   \/* called after each$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_row_info row_info PNG_DEPSTRUCT;     \/* used for transformation$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_rw_ptr read_data_fn PNG_DEPSTRUCT;   \/* function for reading$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_rw_ptr write_data_fn PNG_DEPSTRUCT;  \/* function for writing$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_sPLT_tp splt_palettes PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_size_t buffer_size PNG_DEPSTRUCT;           \/* total amount of$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_size_t current_buffer_size PNG_DEPSTRUCT;   \/* amount of data now$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_size_t rowbytes PNG_DEPSTRUCT;       \/* size of row in bytes *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_size_t rowbytes PNG_DEPSTRUCT; \/* bytes needed to hold an untransformed$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_size_t save_buffer_max PNG_DEPSTRUCT;       \/* total size of$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_size_t save_buffer_size PNG_DEPSTRUCT;      \/* amount of data now$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_size_t unknown_chunks_num PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_size_t zbuf_size PNG_DEPSTRUCT;      \/* size of zbuf *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_textp text PNG_DEPSTRUCT; \/* array of comments read\/to write *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_time mod_time PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_uint_16 filler PNG_DEPSTRUCT;           \/* filler bytes for pixel$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_16 num_palette PNG_DEPSTRUCT;   \/* number of color entries in$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_16 num_palette PNG_DEPSTRUCT; \/* number of color entries in$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_uint_16 num_trans PNG_DEPSTRUCT;     \/* number of transparency values *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_16 num_trans PNG_DEPSTRUCT;   \/* number of transparent palette$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_uint_16 offset_table_count PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_16 offset_table_count_free PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_16 offset_table_number PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_16 rgb_to_gray_blue_coeff PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_16 rgb_to_gray_green_coeff PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_16 rgb_to_gray_red_coeff PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_16p filter_costs PNG_DEPSTRUCT;        \/* relative filter$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_16p filter_weights PNG_DEPSTRUCT;      \/* weight(s) for previous$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_16p hist PNG_DEPSTRUCT;                \/* histogram *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_16p hist PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_uint_16p inv_filter_costs PNG_DEPSTRUCT;    \/* 1\/relative filter$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_16p inv_filter_weights PNG_DEPSTRUCT;  \/* 1\/weight(s) for$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_16pp gamma_16_from_1 PNG_DEPSTRUCT; \/* converts from 1.0 to$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_16pp gamma_16_table PNG_DEPSTRUCT; \/* gamma table for 16-bit$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_16pp gamma_16_to_1 PNG_DEPSTRUCT; \/* converts from file to 1.0 *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 crc PNG_DEPSTRUCT;           \/* current chunk CRC value *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 flags PNG_DEPSTRUCT;         \/* flags indicating various$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 flush_dist PNG_DEPSTRUCT;    \/* how many rows apart to flush,$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 flush_rows PNG_DEPSTRUCT;    \/* number of rows written since$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 free_me PNG_DEPSTRUCT;     \/* flags items libpng is$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_uint_32 free_me PNG_DEPSTRUCT;    \/* flags items libpng is$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 height PNG_DEPSTRUCT;        \/* height of image in pixels *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 height PNG_DEPSTRUCT; \/* height of image in pixels (from IHDR) *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_uint_32 iccp_proflen PNG_DEPSTRUCT;  \/* ICC profile data length *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_uint_32 idat_size PNG_DEPSTRUCT;     \/* current IDAT size for read *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 io_state PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 iwidth PNG_DEPSTRUCT;        \/* width of current interlaced$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 mng_features_permitted PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 mode PNG_DEPSTRUCT;          \/* tells us where we are in$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 num_rows PNG_DEPSTRUCT;      \/* number of rows in current pass *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 push_length PNG_DEPSTRUCT;          \/* size of current input$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 row_number PNG_DEPSTRUCT;    \/* current row in interlace pass *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 skip_length PNG_DEPSTRUCT;          \/* bytes to skip in$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 splt_palettes_num PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_uint_32 transformations PNG_DEPSTRUCT; \/* which transformations$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 user_chunk_cache_max PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 user_height_max PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 user_width_max PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 usr_width PNG_DEPSTRUCT;     \/* width of row at start of write *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 valid PNG_DEPSTRUCT;  \/* valid chunk data (see PNG_INFO_$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_uint_32 width PNG_DEPSTRUCT;         \/* width of image in pixels *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_uint_32 width PNG_DEPSTRUCT;  \/* width of image in pixels (from IHDR) *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_uint_32 x_pixels_per_unit PNG_DEPSTRUCT; \/* horizontal pixel density *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_uint_32 y_pixels_per_unit PNG_DEPSTRUCT; \/* vertical pixel density *\/$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_unknown_chunk unknown_chunk PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_unknown_chunkp unknown_chunks PNG_DEPSTRUCT;$/;"	m	struct:png_info_struct
PNG_DEPSTRUCT	png.h	/^   png_user_chunk_ptr read_user_chunk_fn PNG_DEPSTRUCT; \/* user read$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_user_transform_ptr read_user_transform_fn PNG_DEPSTRUCT; \/* user read$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_user_transform_ptr write_user_transform_fn PNG_DEPSTRUCT; \/* user write$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_voidp error_ptr PNG_DEPSTRUCT;       \/* user supplied struct for$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_voidp io_ptr PNG_DEPSTRUCT;          \/* ptr to application struct$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_voidp mem_ptr PNG_DEPSTRUCT;             \/* user supplied struct for$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_voidp user_chunk_ptr PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_voidp user_transform_ptr PNG_DEPSTRUCT; \/* user supplied struct$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   png_write_status_ptr write_row_fn PNG_DEPSTRUCT; \/* called after each$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^   z_stream zstream PNG_DEPSTRUCT;          \/* pointer to decompression$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^  png_charp chunkdata PNG_DEPSTRUCT;  \/* buffer for reading chunk data *\/$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^  png_uint_32 old_big_row_buf_size PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	png.h	/^  png_uint_32 old_prev_row_size PNG_DEPSTRUCT;$/;"	m	struct:png_struct_def
PNG_DEPSTRUCT	pngconf.h	1404;"	d
PNG_DEPSTRUCT	pngconf.h	1431;"	d
PNG_DESTROY_WILL_FREE_DATA	png.h	2083;"	d
PNG_DLL	pngconf.h	1258;"	d
PNG_DLL	pngconf.h	232;"	d
PNG_DLL	pngconf.h	246;"	d
PNG_DLL	pngconf.h	254;"	d
PNG_DLL	pngconf.h	261;"	d
PNG_EASY_ACCESS_SUPPORTED	pngconf.h	704;"	d
PNG_EQUATION_ARBITRARY	png.h	954;"	d
PNG_EQUATION_BASE_E	png.h	953;"	d
PNG_EQUATION_HYPERBOLIC	png.h	955;"	d
PNG_EQUATION_LAST	png.h	956;"	d
PNG_EQUATION_LINEAR	png.h	952;"	d
PNG_ERROR_TEXT_SUPPORTED	pngconf.h	145;"	d
PNG_EXPAND	pngpriv.h	114;"	d
PNG_EXPAND_tRNS	pngpriv.h	128;"	d
PNG_EXPORT	pngconf.h	1316;"	d
PNG_EXPORT	pngconf.h	1318;"	d
PNG_EXPORT	pngconf.h	1356;"	d
PNG_EXPORT	pngconf.h	1361;"	d
PNG_EXPORT_TYPE1	pngconf.h	1310;"	d
PNG_EXPORT_TYPE2	pngconf.h	1311;"	d
PNG_EXTERN	pngpriv.h	40;"	d
PNG_FILLER	pngpriv.h	117;"	d
PNG_FILLER_AFTER	png.h	1680;"	d
PNG_FILLER_BEFORE	png.h	1679;"	d
PNG_FILTER_AVG	png.h	1867;"	d
PNG_FILTER_HEURISTIC_DEFAULT	png.h	1921;"	d
PNG_FILTER_HEURISTIC_LAST	png.h	1924;"	d
PNG_FILTER_HEURISTIC_UNWEIGHTED	png.h	1922;"	d
PNG_FILTER_HEURISTIC_WEIGHTED	png.h	1923;"	d
PNG_FILTER_NONE	png.h	1864;"	d
PNG_FILTER_PAETH	png.h	1868;"	d
PNG_FILTER_SUB	png.h	1865;"	d
PNG_FILTER_TYPE_BASE	png.h	937;"	d
PNG_FILTER_TYPE_DEFAULT	png.h	939;"	d
PNG_FILTER_UP	png.h	1866;"	d
PNG_FILTER_VALUE_AVG	png.h	1878;"	d
PNG_FILTER_VALUE_LAST	png.h	1880;"	d
PNG_FILTER_VALUE_NONE	png.h	1875;"	d
PNG_FILTER_VALUE_PAETH	png.h	1879;"	d
PNG_FILTER_VALUE_SUB	png.h	1876;"	d
PNG_FILTER_VALUE_UP	png.h	1877;"	d
PNG_FIXED_POINT_SUPPORTED	pngconf.h	504;"	d
PNG_FLAG_ADD_ALPHA	pngpriv.h	167;"	d
PNG_FLAG_BENIGN_ERRORS_WARN	pngpriv.h	169;"	d
PNG_FLAG_CRC_ANCILLARY_MASK	pngpriv.h	178;"	d
PNG_FLAG_CRC_ANCILLARY_NOWARN	pngpriv.h	155;"	d
PNG_FLAG_CRC_ANCILLARY_USE	pngpriv.h	154;"	d
PNG_FLAG_CRC_CRITICAL_IGNORE	pngpriv.h	157;"	d
PNG_FLAG_CRC_CRITICAL_MASK	pngpriv.h	181;"	d
PNG_FLAG_CRC_CRITICAL_USE	pngpriv.h	156;"	d
PNG_FLAG_CRC_MASK	pngpriv.h	184;"	d
PNG_FLAG_FILLER_AFTER	pngpriv.h	153;"	d
PNG_FLAG_KEEP_UNKNOWN_CHUNKS	pngpriv.h	161;"	d
PNG_FLAG_KEEP_UNSAFE_CHUNKS	pngpriv.h	162;"	d
PNG_FLAG_LIBRARY_MISMATCH	pngpriv.h	163;"	d
PNG_FLAG_MALLOC_NULL_MEM_OK	pngpriv.h	166;"	d
PNG_FLAG_MNG_EMPTY_PLTE	png.h	1090;"	d
PNG_FLAG_MNG_FILTER_64	png.h	1091;"	d
PNG_FLAG_ROW_INIT	pngpriv.h	152;"	d
PNG_FLAG_STRIP_ALPHA	pngpriv.h	168;"	d
PNG_FLAG_STRIP_ERROR_NUMBERS	pngpriv.h	164;"	d
PNG_FLAG_STRIP_ERROR_TEXT	pngpriv.h	165;"	d
PNG_FLAG_ZLIB_CUSTOM_LEVEL	pngpriv.h	147;"	d
PNG_FLAG_ZLIB_CUSTOM_MEM_LEVEL	pngpriv.h	148;"	d
PNG_FLAG_ZLIB_CUSTOM_METHOD	pngpriv.h	150;"	d
PNG_FLAG_ZLIB_CUSTOM_STRATEGY	pngpriv.h	146;"	d
PNG_FLAG_ZLIB_CUSTOM_WINDOW_BITS	pngpriv.h	149;"	d
PNG_FLAG_ZLIB_FINISHED	pngpriv.h	151;"	d
PNG_FLOATING_POINT_SUPPORTED	pngconf.h	169;"	d
PNG_FREE_ALL	png.h	2098;"	d
PNG_FREE_HIST	png.h	2087;"	d
PNG_FREE_ICCP	png.h	2088;"	d
PNG_FREE_LIST	png.h	2094;"	d
PNG_FREE_MUL	png.h	2099;"	d
PNG_FREE_PCAL	png.h	2091;"	d
PNG_FREE_PLTE	png.h	2095;"	d
PNG_FREE_ROWS	png.h	2090;"	d
PNG_FREE_SCAL	png.h	2092;"	d
PNG_FREE_SPLT	png.h	2089;"	d
PNG_FREE_TEXT	png.h	2097;"	d
PNG_FREE_TRNS	png.h	2096;"	d
PNG_FREE_UNKN	png.h	2093;"	d
PNG_GAMMA	pngpriv.h	115;"	d
PNG_GAMMA_THRESHOLD	pngconf.h	456;"	d
PNG_GET_INT_32_SUPPORTED	pngconf.h	600;"	d
PNG_GRAY_TO_RGB	pngpriv.h	116;"	d
PNG_H	png.h	352;"	d
PNG_HANDLE_AS_UNKNOWN_SUPPORTED	pngconf.h	1095;"	d
PNG_HANDLE_AS_UNKNOWN_SUPPORTED	pngconf.h	944;"	d
PNG_HANDLE_CHUNK_ALWAYS	png.h	2530;"	d
PNG_HANDLE_CHUNK_AS_DEFAULT	png.h	2527;"	d
PNG_HANDLE_CHUNK_IF_SAFE	png.h	2529;"	d
PNG_HANDLE_CHUNK_NEVER	png.h	2528;"	d
PNG_HAVE_CHUNK_AFTER_IDAT	pngpriv.h	99;"	d
PNG_HAVE_CHUNK_HEADER	pngpriv.h	94;"	d
PNG_HAVE_IDAT	png.h	2708;"	d
PNG_HAVE_IDAT	pngpriv.h	88;"	d
PNG_HAVE_IEND	png.h	2710;"	d
PNG_HAVE_IEND	pngpriv.h	90;"	d
PNG_HAVE_IHDR	png.h	2706;"	d
PNG_HAVE_IHDR	pngpriv.h	86;"	d
PNG_HAVE_PLTE	png.h	2707;"	d
PNG_HAVE_PLTE	pngpriv.h	87;"	d
PNG_HAVE_PNG_SIGNATURE	pngpriv.h	98;"	d
PNG_HAVE_cHRM	png.h	2712;"	d
PNG_HAVE_cHRM	pngpriv.h	92;"	d
PNG_HAVE_gAMA	png.h	2711;"	d
PNG_HAVE_gAMA	pngpriv.h	91;"	d
PNG_HAVE_sRGB	pngpriv.h	93;"	d
PNG_HEADER_VERSION_STRING	png.h	362;"	d
PNG_IDAT	pngpriv.h	212;"	d
PNG_IEND	pngpriv.h	213;"	d
PNG_IHDR	pngpriv.h	211;"	d
PNG_IMPEXP	pngconf.h	1271;"	d
PNG_IMPEXP	pngconf.h	1272;"	d
PNG_IMPEXP	pngconf.h	1288;"	d
PNG_IMPEXP	pngconf.h	1305;"	d
PNG_IMPEXP	pngconf.h	1320;"	d
PNG_IMPEXP	pngconf.h	1322;"	d
PNG_IMPEXP	pngconf.h	1330;"	d
PNG_IMPEXP	pngconf.h	1332;"	d
PNG_IMPEXP	pngconf.h	1351;"	d
PNG_INFO_IDAT	png.h	1002;"	d
PNG_INFO_IMAGE_SUPPORTED	pngconf.h	1105;"	d
PNG_INFO_PLTE	png.h	990;"	d
PNG_INFO_bKGD	png.h	992;"	d
PNG_INFO_cHRM	png.h	989;"	d
PNG_INFO_gAMA	png.h	987;"	d
PNG_INFO_hIST	png.h	993;"	d
PNG_INFO_iCCP	png.h	999;"	d
PNG_INFO_oFFs	png.h	995;"	d
PNG_INFO_pCAL	png.h	997;"	d
PNG_INFO_pHYs	png.h	994;"	d
PNG_INFO_sBIT	png.h	988;"	d
PNG_INFO_sCAL	png.h	1001;"	d
PNG_INFO_sPLT	png.h	1000;"	d
PNG_INFO_sRGB	png.h	998;"	d
PNG_INFO_tIME	png.h	996;"	d
PNG_INFO_tRNS	png.h	991;"	d
PNG_INTERLACE	pngpriv.h	103;"	d
PNG_INTERLACE_ADAM7	png.h	943;"	d
PNG_INTERLACE_LAST	png.h	944;"	d
PNG_INTERLACE_NONE	png.h	942;"	d
PNG_INTRAPIXEL_DIFFERENCING	png.h	938;"	d
PNG_INVERT_ALPHA	pngpriv.h	121;"	d
PNG_INVERT_MONO	pngpriv.h	107;"	d
PNG_IO_CHUNK_CRC	png.h	2596;"	d
PNG_IO_CHUNK_DATA	png.h	2595;"	d
PNG_IO_CHUNK_HDR	png.h	2594;"	d
PNG_IO_MASK_LOC	png.h	2598;"	d
PNG_IO_MASK_OP	png.h	2597;"	d
PNG_IO_NONE	png.h	2590;"	d
PNG_IO_READING	png.h	2591;"	d
PNG_IO_SIGNATURE	png.h	2593;"	d
PNG_IO_STATE_SUPPORTED	pngconf.h	758;"	d
PNG_IO_WRITING	png.h	2592;"	d
PNG_ITXT_COMPRESSION_NONE	png.h	563;"	d
PNG_ITXT_COMPRESSION_zTXt	png.h	564;"	d
PNG_KEYWORD_MAX_LENGTH	png.h	977;"	d
PNG_LIBPNG_BUILD_ALPHA	png.h	379;"	d
PNG_LIBPNG_BUILD_BASE_TYPE	png.h	393;"	d
PNG_LIBPNG_BUILD_BETA	png.h	380;"	d
PNG_LIBPNG_BUILD_PATCH	png.h	386;"	d
PNG_LIBPNG_BUILD_PRIVATE	png.h	388;"	d
PNG_LIBPNG_BUILD_RC	png.h	381;"	d
PNG_LIBPNG_BUILD_RELEASE_STATUS_MASK	png.h	383;"	d
PNG_LIBPNG_BUILD_SPECIAL	png.h	390;"	d
PNG_LIBPNG_BUILD_STABLE	png.h	382;"	d
PNG_LIBPNG_BUILD_TYPE	png.h	427;"	d
PNG_LIBPNG_BUILD_TYPE	png.h	431;"	d
PNG_LIBPNG_BUILD_TYPE	png.h	434;"	d
PNG_LIBPNG_VER	png.h	401;"	d
PNG_LIBPNG_VER_BUILD	png.h	376;"	d
PNG_LIBPNG_VER_DLLNUM	png.h	366;"	d
PNG_LIBPNG_VER_MAJOR	png.h	369;"	d
PNG_LIBPNG_VER_MINOR	png.h	370;"	d
PNG_LIBPNG_VER_RELEASE	png.h	371;"	d
PNG_LIBPNG_VER_SONUM	png.h	365;"	d
PNG_LIBPNG_VER_STRING	png.h	361;"	d
PNG_LITERAL_LEFT_SQUARE_BRACKET	pngconf.h	765;"	d
PNG_LITERAL_RIGHT_SQUARE_BRACKET	pngconf.h	768;"	d
PNG_LITERAL_SHARP	pngconf.h	762;"	d
PNG_MAX_ERROR_TEXT	pngerror.c	154;"	d	file:
PNG_MAX_GAMMA_8	pngconf.h	449;"	d
PNG_MAX_MALLOC_64K	pngconf.h	1161;"	d
PNG_MAX_MALLOC_64K	pngconf.h	187;"	d
PNG_MAX_PALETTE_LENGTH	png.h	980;"	d
PNG_MNG_FEATURES_SUPPORTED	pngconf.h	162;"	d
PNG_NORETURN	pngconf.h	1390;"	d
PNG_NORETURN	pngconf.h	1425;"	d
PNG_NO_CONSOLE_IO	pngconf.h	282;"	d
PNG_NO_CONSOLE_IO	pngconf.h	296;"	d
PNG_NO_CONSOLE_IO	pngconf.h	302;"	d
PNG_NO_ERROR_NUMBERS	pngconf.h	674;"	d
PNG_NO_EXTERN	png.c	14;"	d	file:
PNG_NO_FILTERS	png.h	1863;"	d
PNG_NO_LIMITS_H	pngconf.h	26;"	d
PNG_NO_MODULEDEF	pngconf.h	1283;"	d
PNG_NO_PEDANTIC_WARNINGS	png.c	15;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	pngerror.c	19;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	pngget.c	15;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	pngmem.c	20;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	pngread.c	17;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	pngrio.c	21;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	pngrtran.c	19;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	pngrutil.c	17;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	pngset.c	19;"	d	file:
PNG_NO_PEDANTIC_WARNINGS	pngtrans.c	14;"	d	file:
PNG_NO_READ_iTXt	pngconf.h	835;"	d
PNG_NO_READ_oFFs	pngconf.h	25;"	d
PNG_NO_READ_tEXt	pngconf.h	836;"	d
PNG_NO_READ_zTXt	pngconf.h	837;"	d
PNG_NO_STDIO	pngconf.h	283;"	d
PNG_NO_TIME_RFC1123	pngconf.h	284;"	d
PNG_NO_WRITE_iTXt	pngconf.h	952;"	d
PNG_NO_WRITE_tEXt	pngconf.h	953;"	d
PNG_NO_WRITE_zTXt	pngconf.h	954;"	d
PNG_OFFSET_LAST	png.h	949;"	d
PNG_OFFSET_MICROMETER	png.h	948;"	d
PNG_OFFSET_PIXEL	png.h	947;"	d
PNG_OUT_OF_RANGE	pngpriv.h	204;"	d
PNG_PACK	pngpriv.h	104;"	d
PNG_PACKSWAP	pngpriv.h	118;"	d
PNG_PEDANTIC_WARNINGS_SUPPORTED	pngconf.h	1375;"	d
PNG_PLTE	pngpriv.h	214;"	d
PNG_POINTER_INDEXING_SUPPORTED	pngconf.h	801;"	d
PNG_PRIVATE	pngconf.h	1411;"	d
PNG_PRIVATE	pngconf.h	1434;"	d
PNG_PROGRESSIVE_READ_SUPPORTED	pngconf.h	578;"	d
PNG_QUANTIZE	pngpriv.h	108;"	d
PNG_QUANTIZE_BLUE_BITS	pngconf.h	428;"	d
PNG_QUANTIZE_BLUE_BITS	pngconf.h	438;"	d
PNG_QUANTIZE_GREEN_BITS	pngconf.h	425;"	d
PNG_QUANTIZE_GREEN_BITS	pngconf.h	435;"	d
PNG_QUANTIZE_RED_BITS	pngconf.h	422;"	d
PNG_QUANTIZE_RED_BITS	pngconf.h	432;"	d
PNG_READ_16_TO_8_SUPPORTED	pngconf.h	547;"	d
PNG_READ_ANCILLARY_CHUNKS_SUPPORTED	pngconf.h	822;"	d
PNG_READ_BACKGROUND_SUPPORTED	pngconf.h	544;"	d
PNG_READ_BGR_SUPPORTED	pngconf.h	526;"	d
PNG_READ_COMPOSITE_NODIV_SUPPORTED	pngconf.h	593;"	d
PNG_READ_EXPAND_SUPPORTED	pngconf.h	517;"	d
PNG_READ_FILLER_SUPPORTED	pngconf.h	550;"	d
PNG_READ_GAMMA_SUPPORTED	pngconf.h	553;"	d
PNG_READ_GRAY_TO_RGB_SUPPORTED	pngconf.h	556;"	d
PNG_READ_INTERLACING_SUPPORTED	pngconf.h	582;"	d
PNG_READ_INVERT_ALPHA_SUPPORTED	pngconf.h	562;"	d
PNG_READ_INVERT_SUPPORTED	pngconf.h	535;"	d
PNG_READ_OPT_PLTE_SUPPORTED	pngconf.h	913;"	d
PNG_READ_PACKSWAP_SUPPORTED	pngconf.h	532;"	d
PNG_READ_PACK_SUPPORTED	pngconf.h	523;"	d
PNG_READ_QUANTIZE_SUPPORTED	pngconf.h	540;"	d
PNG_READ_RGB_TO_GRAY_SUPPORTED	pngconf.h	571;"	d
PNG_READ_SHIFT_SUPPORTED	pngconf.h	520;"	d
PNG_READ_STRIP_ALPHA_SUPPORTED	pngconf.h	565;"	d
PNG_READ_SUPPORTED	pngconf.h	118;"	d
PNG_READ_SWAP_ALPHA_SUPPORTED	pngconf.h	559;"	d
PNG_READ_SWAP_SUPPORTED	pngconf.h	529;"	d
PNG_READ_TEXT_SUPPORTED	pngconf.h	917;"	d
PNG_READ_TRANSFORMS_SUPPORTED	pngconf.h	512;"	d
PNG_READ_UNKNOWN_CHUNKS_SUPPORTED	pngconf.h	925;"	d
PNG_READ_USER_CHUNKS_SUPPORTED	pngconf.h	931;"	d
PNG_READ_USER_CHUNKS_SUPPORTED	pngconf.h	936;"	d
PNG_READ_USER_TRANSFORM_SUPPORTED	pngconf.h	568;"	d
PNG_READ_bKGD_SUPPORTED	pngconf.h	841;"	d
PNG_READ_cHRM_SUPPORTED	pngconf.h	845;"	d
PNG_READ_gAMA_SUPPORTED	pngconf.h	849;"	d
PNG_READ_hIST_SUPPORTED	pngconf.h	853;"	d
PNG_READ_iCCP_SUPPORTED	pngconf.h	857;"	d
PNG_READ_iTXt_SUPPORTED	pngconf.h	862;"	d
PNG_READ_oFFs_SUPPORTED	pngconf.h	869;"	d
PNG_READ_pCAL_SUPPORTED	pngconf.h	873;"	d
PNG_READ_pHYs_SUPPORTED	pngconf.h	881;"	d
PNG_READ_sBIT_SUPPORTED	pngconf.h	885;"	d
PNG_READ_sCAL_SUPPORTED	pngconf.h	877;"	d
PNG_READ_sPLT_SUPPORTED	pngconf.h	889;"	d
PNG_READ_sRGB_SUPPORTED	pngconf.h	893;"	d
PNG_READ_tEXt_SUPPORTED	pngconf.h	897;"	d
PNG_READ_tIME_SUPPORTED	pngconf.h	901;"	d
PNG_READ_tRNS_SUPPORTED	pngconf.h	905;"	d
PNG_READ_zTXt_SUPPORTED	pngconf.h	909;"	d
PNG_RESOLUTION_LAST	png.h	967;"	d
PNG_RESOLUTION_METER	png.h	966;"	d
PNG_RESOLUTION_UNKNOWN	png.h	965;"	d
PNG_RGBA	pngpriv.h	113;"	d
PNG_RGB_TO_GRAY	pngpriv.h	125;"	d
PNG_RGB_TO_GRAY_ERR	pngpriv.h	123;"	d
PNG_RGB_TO_GRAY_WARN	pngpriv.h	124;"	d
PNG_ROWBYTES	pngpriv.h	194;"	d
PNG_SAVE_BSD_SOURCE	pngconf.h	378;"	d
PNG_SAVE_BSD_SOURCE	pngconf.h	400;"	d
PNG_SAVE_INT_32_SUPPORTED	pngconf.h	668;"	d
PNG_SCALE_LAST	png.h	962;"	d
PNG_SCALE_METER	png.h	960;"	d
PNG_SCALE_RADIAN	png.h	961;"	d
PNG_SCALE_UNKNOWN	png.h	959;"	d
PNG_SEQUENTIAL_READ_SUPPORTED	pngconf.h	588;"	d
PNG_SETJMP_SUPPORTED	pngconf.h	359;"	d
PNG_SET_CHUNK_CACHE_LIMIT_SUPPORTED	pngconf.h	719;"	d
PNG_SET_CHUNK_MALLOC_LIMIT_SUPPORTED	pngconf.h	723;"	d
PNG_SET_USER_LIMITS_SUPPORTED	pngconf.h	715;"	d
PNG_SET_WILL_FREE_DATA	png.h	2084;"	d
PNG_SHIFT	pngpriv.h	105;"	d
PNG_SIZE_MAX	png.h	914;"	d
PNG_STATIC	pngconf.h	235;"	d
PNG_STATIC	pngconf.h	240;"	d
PNG_STDIO_SUPPORTED	pngconf.h	291;"	d
PNG_STRING_NEWLINE	pngconf.h	771;"	d
PNG_STRIP_ALPHA	pngpriv.h	120;"	d
PNG_STRUCT_INFO	pngpriv.h	137;"	d
PNG_STRUCT_PNG	pngpriv.h	136;"	d
PNG_SWAP_ALPHA	pngpriv.h	119;"	d
PNG_SWAP_BYTES	pngpriv.h	106;"	d
PNG_TEXT_COMPRESSION_LAST	png.h	565;"	d
PNG_TEXT_COMPRESSION_NONE	png.h	561;"	d
PNG_TEXT_COMPRESSION_NONE_WR	png.h	559;"	d
PNG_TEXT_COMPRESSION_zTXt	png.h	562;"	d
PNG_TEXT_COMPRESSION_zTXt_WR	png.h	560;"	d
PNG_TEXT_SUPPORTED	pngconf.h	1064;"	d
PNG_TEXT_SUPPORTED	pngconf.h	918;"	d
PNG_TIME_RFC1123_SUPPORTED	pngconf.h	684;"	d
PNG_TRANSFORM_BGR	png.h	1078;"	d
PNG_TRANSFORM_EXPAND	png.h	1075;"	d
PNG_TRANSFORM_GRAY_TO_RGB	png.h	1087;"	d
PNG_TRANSFORM_IDENTITY	png.h	1070;"	d
PNG_TRANSFORM_INVERT_ALPHA	png.h	1081;"	d
PNG_TRANSFORM_INVERT_MONO	png.h	1076;"	d
PNG_TRANSFORM_PACKING	png.h	1073;"	d
PNG_TRANSFORM_PACKSWAP	png.h	1074;"	d
PNG_TRANSFORM_SHIFT	png.h	1077;"	d
PNG_TRANSFORM_STRIP_16	png.h	1071;"	d
PNG_TRANSFORM_STRIP_ALPHA	png.h	1072;"	d
PNG_TRANSFORM_STRIP_FILLER	png.h	1082;"	d
PNG_TRANSFORM_STRIP_FILLER_AFTER	png.h	1085;"	d
PNG_TRANSFORM_STRIP_FILLER_BEFORE	png.h	1084;"	d
PNG_TRANSFORM_SWAP_ALPHA	png.h	1079;"	d
PNG_TRANSFORM_SWAP_ENDIAN	png.h	1080;"	d
PNG_UINT_31_MAX	png.h	912;"	d
PNG_UINT_32_MAX	png.h	913;"	d
PNG_UNKNOWN_CHUNKS_SUPPORTED	pngconf.h	1090;"	d
PNG_UNKNOWN_CHUNKS_SUPPORTED	pngconf.h	928;"	d
PNG_USER_CHUNKS_SUPPORTED	pngconf.h	939;"	d
PNG_USER_CHUNK_CACHE_MAX	pngconf.h	748;"	d
PNG_USER_CHUNK_MALLOC_MAX	pngconf.h	753;"	d
PNG_USER_HEIGHT_MAX	pngconf.h	741;"	d
PNG_USER_LIMITS_SUPPORTED	pngconf.h	730;"	d
PNG_USER_MEM_SUPPORTED	pngconf.h	709;"	d
PNG_USER_PRIVATEBUILD	pngconf.h	58;"	d
PNG_USER_PRIVATEBUILD	pngconf.h	90;"	d
PNG_USER_TRANSFORM	pngpriv.h	122;"	d
PNG_USER_TRANSFORM_PTR_SUPPORTED	pngconf.h	679;"	d
PNG_USER_WIDTH_MAX	pngconf.h	738;"	d
PNG_USER_WILL_FREE_DATA	png.h	2085;"	d
PNG_USE_DLL	pngconf.h	229;"	d
PNG_USE_DLL	pngconf.h	243;"	d
PNG_USE_DLL	pngconf.h	251;"	d
PNG_USE_DLL	pngconf.h	258;"	d
PNG_USE_LOCAL_ARRAYS	pngconf.h	1364;"	d
PNG_USE_READ_MACROS	pngconf.h	794;"	d
PNG_USE_RESULT	pngconf.h	1387;"	d
PNG_USE_RESULT	pngconf.h	1422;"	d
PNG_WARNINGS_SUPPORTED	pngconf.h	140;"	d
PNG_WEIGHT_FACTOR	pngpriv.h	141;"	d
PNG_WEIGHT_SHIFT	pngpriv.h	140;"	d
PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED	pngconf.h	829;"	d
PNG_WRITE_BGR_SUPPORTED	pngconf.h	622;"	d
PNG_WRITE_FILLER_SUPPORTED	pngconf.h	634;"	d
PNG_WRITE_FILTER_SUPPORTED	pngconf.h	1083;"	d
PNG_WRITE_FLUSH_SUPPORTED	pngconf.h	662;"	d
PNG_WRITE_INTERLACING_SUPPORTED	pngconf.h	652;"	d
PNG_WRITE_INVERT_ALPHA_SUPPORTED	pngconf.h	640;"	d
PNG_WRITE_INVERT_SUPPORTED	pngconf.h	631;"	d
PNG_WRITE_PACKSWAP_SUPPORTED	pngconf.h	628;"	d
PNG_WRITE_PACK_SUPPORTED	pngconf.h	619;"	d
PNG_WRITE_SHIFT_SUPPORTED	pngconf.h	616;"	d
PNG_WRITE_SUPPORTED	pngconf.h	124;"	d
PNG_WRITE_SWAP_ALPHA_SUPPORTED	pngconf.h	637;"	d
PNG_WRITE_SWAP_SUPPORTED	pngconf.h	625;"	d
PNG_WRITE_TEXT_SUPPORTED	pngconf.h	1062;"	d
PNG_WRITE_TRANSFORMS_SUPPORTED	pngconf.h	611;"	d
PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED	pngconf.h	1088;"	d
PNG_WRITE_USER_TRANSFORM_SUPPORTED	pngconf.h	643;"	d
PNG_WRITE_WEIGHTED_FILTER_SUPPORTED	pngconf.h	658;"	d
PNG_WRITE_bKGD_SUPPORTED	pngconf.h	957;"	d
PNG_WRITE_cHRM_SUPPORTED	pngconf.h	963;"	d
PNG_WRITE_gAMA_SUPPORTED	pngconf.h	969;"	d
PNG_WRITE_hIST_SUPPORTED	pngconf.h	975;"	d
PNG_WRITE_iCCP_SUPPORTED	pngconf.h	981;"	d
PNG_WRITE_iTXt_SUPPORTED	pngconf.h	988;"	d
PNG_WRITE_oFFs_SUPPORTED	pngconf.h	995;"	d
PNG_WRITE_pCAL_SUPPORTED	pngconf.h	1001;"	d
PNG_WRITE_pHYs_SUPPORTED	pngconf.h	1013;"	d
PNG_WRITE_sBIT_SUPPORTED	pngconf.h	1019;"	d
PNG_WRITE_sCAL_SUPPORTED	pngconf.h	1007;"	d
PNG_WRITE_sPLT_SUPPORTED	pngconf.h	1025;"	d
PNG_WRITE_sRGB_SUPPORTED	pngconf.h	1031;"	d
PNG_WRITE_tEXt_SUPPORTED	pngconf.h	1037;"	d
PNG_WRITE_tIME_SUPPORTED	pngconf.h	1043;"	d
PNG_WRITE_tRNS_SUPPORTED	pngconf.h	1049;"	d
PNG_WRITE_zTXt_SUPPORTED	pngconf.h	1055;"	d
PNG_WROTE_INFO_BEFORE_PLTE	pngpriv.h	96;"	d
PNG_WROTE_tIME	pngpriv.h	95;"	d
PNG_ZBUF_SIZE	pngconf.h	112;"	d
PNG_ZBUF_SIZE	pngconf.h	1544;"	d
PNG_ZBUF_SIZE	pngconf.h	1545;"	d
PNG_bKGD	pngpriv.h	215;"	d
PNG_bKGD_SUPPORTED	pngconf.h	842;"	d
PNG_bKGD_SUPPORTED	pngconf.h	959;"	d
PNG_cHRM	pngpriv.h	216;"	d
PNG_cHRM_SUPPORTED	pngconf.h	846;"	d
PNG_cHRM_SUPPORTED	pngconf.h	965;"	d
PNG_gAMA	pngpriv.h	217;"	d
PNG_gAMA_SUPPORTED	pngconf.h	850;"	d
PNG_gAMA_SUPPORTED	pngconf.h	971;"	d
PNG_hIST	pngpriv.h	218;"	d
PNG_hIST_SUPPORTED	pngconf.h	854;"	d
PNG_hIST_SUPPORTED	pngconf.h	977;"	d
PNG_iCCP	pngpriv.h	219;"	d
PNG_iCCP_SUPPORTED	pngconf.h	858;"	d
PNG_iCCP_SUPPORTED	pngconf.h	983;"	d
PNG_iTXt	pngpriv.h	220;"	d
PNG_iTXt_SUPPORTED	pngconf.h	865;"	d
PNG_iTXt_SUPPORTED	pngconf.h	991;"	d
PNG_oFFs	pngpriv.h	221;"	d
PNG_oFFs_SUPPORTED	pngconf.h	870;"	d
PNG_oFFs_SUPPORTED	pngconf.h	997;"	d
PNG_pCAL	pngpriv.h	222;"	d
PNG_pCAL_SUPPORTED	pngconf.h	1003;"	d
PNG_pCAL_SUPPORTED	pngconf.h	874;"	d
PNG_pHYs	pngpriv.h	224;"	d
PNG_pHYs_SUPPORTED	pngconf.h	1015;"	d
PNG_pHYs_SUPPORTED	pngconf.h	882;"	d
PNG_sBIT	pngpriv.h	225;"	d
PNG_sBIT_SUPPORTED	pngconf.h	1021;"	d
PNG_sBIT_SUPPORTED	pngconf.h	886;"	d
PNG_sCAL	pngpriv.h	223;"	d
PNG_sCAL_SUPPORTED	pngconf.h	1009;"	d
PNG_sCAL_SUPPORTED	pngconf.h	878;"	d
PNG_sPLT	pngpriv.h	226;"	d
PNG_sPLT_SUPPORTED	pngconf.h	1027;"	d
PNG_sPLT_SUPPORTED	pngconf.h	890;"	d
PNG_sRGB	pngpriv.h	227;"	d
PNG_sRGB_INTENT_ABSOLUTE	png.h	973;"	d
PNG_sRGB_INTENT_LAST	png.h	974;"	d
PNG_sRGB_INTENT_PERCEPTUAL	png.h	970;"	d
PNG_sRGB_INTENT_RELATIVE	png.h	971;"	d
PNG_sRGB_INTENT_SATURATION	png.h	972;"	d
PNG_sRGB_SUPPORTED	pngconf.h	1033;"	d
PNG_sRGB_SUPPORTED	pngconf.h	894;"	d
PNG_sTER	pngpriv.h	228;"	d
PNG_tEXt	pngpriv.h	229;"	d
PNG_tEXt_SUPPORTED	pngconf.h	1039;"	d
PNG_tEXt_SUPPORTED	pngconf.h	898;"	d
PNG_tIME	pngpriv.h	230;"	d
PNG_tIME_SUPPORTED	pngconf.h	1045;"	d
PNG_tIME_SUPPORTED	pngconf.h	902;"	d
PNG_tRNS	pngpriv.h	231;"	d
PNG_tRNS_SUPPORTED	pngconf.h	1051;"	d
PNG_tRNS_SUPPORTED	pngconf.h	906;"	d
PNG_zTXt	pngpriv.h	232;"	d
PNG_zTXt_SUPPORTED	pngconf.h	1057;"	d
PNG_zTXt_SUPPORTED	pngconf.h	910;"	d
PREFIX	Makefile	/^PREFIX=\/tmp$/;"	m
USE_FAR_KEYWORD	pngconf.h	1166;"	d
USE_FAR_KEYWORD	pngconf.h	1185;"	d
Your_png_h_is_not_version_1_4_5	png.c	/^typedef version_1_4_5 Your_png_h_is_not_version_1_4_5;$/;"	t	file:
_BSD_SOURCE	pngconf.h	379;"	d
_BSD_SOURCE	pngconf.h	397;"	d
_BSD_SOURCE	pngconf.h	399;"	d
_DEBUG	pngpriv.h	855;"	d
alpha	png.h	/^   png_byte alpha; \/* for alpha channel files *\/$/;"	m	struct:png_color_8_struct
alpha	png.h	/^   png_uint_16 alpha;$/;"	m	struct:png_sPLT_entry_struct
bit_depth	png.h	/^   png_byte bit_depth; \/* bit depth of row *\/$/;"	m	struct:png_row_info_struct
blue	png.h	/^   png_byte blue;$/;"	m	struct:png_color_8_struct
blue	png.h	/^   png_byte blue;$/;"	m	struct:png_color_struct
blue	png.h	/^   png_uint_16 blue;$/;"	m	struct:png_color_16_struct
blue	png.h	/^   png_uint_16 blue;$/;"	m	struct:png_sPLT_entry_struct
channels	png.h	/^   png_byte channels; \/* number of channels (1, 2, 3, or 4) *\/$/;"	m	struct:png_row_info_struct
color_type	png.h	/^   png_byte color_type; \/* color type of row *\/$/;"	m	struct:png_row_info_struct
compression	png.h	/^   int  compression;       \/* compression value:$/;"	m	struct:png_text_struct
data	png.h	/^    png_byte *data;$/;"	m	struct:png_unknown_chunk_t
day	png.h	/^   png_byte day;     \/* day of month, 1 - 31 *\/$/;"	m	struct:png_time_struct
depth	png.h	/^   png_byte depth;           \/* depth of palette samples *\/$/;"	m	struct:png_sPLT_struct
entries	png.h	/^   png_sPLT_entryp entries;  \/* palette entries *\/$/;"	m	struct:png_sPLT_struct
fourbppswaptable	pngtrans.c	/^static PNG_CONST png_byte fourbppswaptable[256] = {$/;"	v	file:
fprintf	pngconf.h	31;"	d
frequency	png.h	/^   png_uint_16 frequency;$/;"	m	struct:png_sPLT_entry_struct
gray	png.h	/^   png_byte gray;  \/* for use in grayscale files *\/$/;"	m	struct:png_color_8_struct
gray	png.h	/^   png_uint_16 gray;  \/* for use in grayscale files *\/$/;"	m	struct:png_color_16_struct
green	png.h	/^   png_byte green;$/;"	m	struct:png_color_8_struct
green	png.h	/^   png_byte green;$/;"	m	struct:png_color_struct
green	png.h	/^   png_uint_16 green;$/;"	m	struct:png_color_16_struct
green	png.h	/^   png_uint_16 green;$/;"	m	struct:png_sPLT_entry_struct
hour	png.h	/^   png_byte hour;    \/* hour of day, 0 - 23 *\/$/;"	m	struct:png_time_struct
index	png.h	/^   png_byte index;    \/* used for palette files *\/$/;"	m	struct:png_color_16_struct
isnonalpha	pngerror.c	148;"	d	file:
isnonalpha	pngrutil.c	2518;"	d	file:
itxt_length	png.h	/^   png_size_t itxt_length; \/* length of the itxt string *\/$/;"	m	struct:png_text_struct
key	png.h	/^   png_charp key;          \/* keyword, 1-79 character description of "text" *\/$/;"	m	struct:png_text_struct
lang	png.h	/^   png_charp lang;         \/* language code, 0-79 characters$/;"	m	struct:png_text_struct
lang_key	png.h	/^   png_charp lang_key;     \/* keyword translated UTF-8 string, 0 or more$/;"	m	struct:png_text_struct
left	pngrtran.c	/^   png_byte left;$/;"	m	struct:png_dsort_struct	file:
location	png.h	/^    png_byte location; \/* mode of operation at read time *\/$/;"	m	struct:png_unknown_chunk_t
minute	png.h	/^   png_byte minute;  \/* minute of hour, 0 - 59 *\/$/;"	m	struct:png_time_struct
month	png.h	/^   png_byte month;   \/* month of year, 1 - 12 *\/$/;"	m	struct:png_time_struct
name	png.h	/^    png_byte name[5];$/;"	m	struct:png_unknown_chunk_t
name	png.h	/^   png_charp name;           \/* palette name *\/$/;"	m	struct:png_sPLT_struct
nentries	png.h	/^   png_int_32 nentries;      \/* number of palette entries *\/$/;"	m	struct:png_sPLT_struct
next	pngrtran.c	/^   struct png_dsort_struct FAR * next;$/;"	m	struct:png_dsort_struct	typeref:struct:png_dsort_struct::FAR	file:
onebppswaptable	pngtrans.c	/^static PNG_CONST png_byte onebppswaptable[256] = {$/;"	v	file:
pixel_depth	png.h	/^   png_byte pixel_depth; \/* bits per pixel (depth * channels) *\/$/;"	m	struct:png_row_info_struct
png_64bit_product	png.c	/^png_64bit_product(long v1, long v2, unsigned long *hi_product,$/;"	f
png_FILE_p	pngconf.h	/^typedef FILE                * png_FILE_p;$/;"	t
png_access_version_number	png.c	/^png_access_version_number(void)$/;"	f
png_alloc_size_t	pngconf.h	/^       typedef DWORD         png_alloc_size_t;$/;"	t
png_alloc_size_t	pngconf.h	/^       typedef png_size_t    png_alloc_size_t;$/;"	t
png_alloc_size_t	pngconf.h	/^     typedef unsigned long    png_alloc_size_t;$/;"	t
png_alloc_size_t	pngconf.h	/^   typedef unsigned long png_alloc_size_t;$/;"	t
png_benign_error	pngconf.h	129;"	d
png_benign_error	pngconf.h	133;"	d
png_benign_error	pngerror.c	/^png_benign_error(png_structp png_ptr, png_const_charp error_message)$/;"	f
png_build_gamma_table	pngrtran.c	/^png_build_gamma_table(png_structp png_ptr, png_byte bit_depth)$/;"	f
png_build_grayscale_palette	pngrtran.c	/^png_build_grayscale_palette(int bit_depth, png_colorp palette)$/;"	f
png_byte	pngconf.h	/^typedef unsigned char png_byte;$/;"	t
png_bytep	pngconf.h	/^typedef png_byte        FAR * png_bytep;$/;"	t
png_bytepp	pngconf.h	/^typedef png_byte        FAR * FAR * png_bytepp;$/;"	t
png_calculate_crc	png.c	/^png_calculate_crc(png_structp png_ptr, png_bytep ptr, png_size_t length)$/;"	f
png_calloc	pngmem.c	/^png_calloc(png_structp png_ptr, png_alloc_size_t size)$/;"	f
png_charp	pngconf.h	/^typedef char            FAR * png_charp;$/;"	t
png_charpp	pngconf.h	/^typedef char            FAR * FAR * png_charpp;$/;"	t
png_charppp	pngconf.h	/^typedef char            FAR * FAR * FAR * png_charppp;$/;"	t
png_check_IHDR	png.c	/^png_check_IHDR(png_structp png_ptr,$/;"	f
png_check_cHRM_fixed	png.c	/^png_check_cHRM_fixed(png_structp png_ptr,$/;"	f
png_check_chunk_name	pngrutil.c	/^png_check_chunk_name(png_structp png_ptr, png_bytep chunk_name)$/;"	f
png_check_sig	png.h	1518;"	d
png_chunk_benign_error	pngconf.h	130;"	d
png_chunk_benign_error	pngconf.h	134;"	d
png_chunk_benign_error	pngerror.c	/^png_chunk_benign_error(png_structp png_ptr, png_const_charp error_message)$/;"	f
png_chunk_error	pngerror.c	/^png_chunk_error(png_structp png_ptr, png_const_charp error_message)$/;"	f
png_chunk_warning	pngerror.c	/^png_chunk_warning(png_structp png_ptr, png_const_charp warning_message)$/;"	f
png_color	png.h	/^} png_color;$/;"	t	typeref:struct:png_color_struct
png_color_16	png.h	/^} png_color_16;$/;"	t	typeref:struct:png_color_16_struct
png_color_16_struct	png.h	/^typedef struct png_color_16_struct$/;"	s
png_color_16p	png.h	/^typedef png_color_16 FAR * png_color_16p;$/;"	t
png_color_16pp	png.h	/^typedef png_color_16 FAR * FAR * png_color_16pp;$/;"	t
png_color_8	png.h	/^} png_color_8;$/;"	t	typeref:struct:png_color_8_struct
png_color_8_struct	png.h	/^typedef struct png_color_8_struct$/;"	s
png_color_8p	png.h	/^typedef png_color_8 FAR * png_color_8p;$/;"	t
png_color_8pp	png.h	/^typedef png_color_8 FAR * FAR * png_color_8pp;$/;"	t
png_color_struct	png.h	/^typedef struct png_color_struct$/;"	s
png_colorp	png.h	/^typedef png_color FAR * png_colorp;$/;"	t
png_colorpp	png.h	/^typedef png_color FAR * FAR * png_colorpp;$/;"	t
png_combine_row	pngrutil.c	/^png_combine_row(png_structp png_ptr, png_bytep row, int mask)$/;"	f
png_composite	png.h	2620;"	d
png_composite	png.h	2636;"	d
png_composite_16	png.h	2627;"	d
png_composite_16	png.h	2641;"	d
png_const_charp	pngconf.h	/^typedef PNG_CONST char  FAR * png_const_charp;$/;"	t
png_const_charpp	pngconf.h	/^typedef PNG_CONST char  FAR * FAR * png_const_charpp;$/;"	t
png_convert_size	png.c	/^png_convert_size(size_t size)$/;"	f
png_convert_to_rfc1123	png.c	/^png_convert_to_rfc1123(png_structp png_ptr, png_timep ptime)$/;"	f
png_crc_error	pngrutil.c	/^png_crc_error(png_structp png_ptr)$/;"	f
png_crc_finish	pngrutil.c	/^png_crc_finish(png_structp png_ptr, png_uint_32 skip)$/;"	f
png_crc_read	pngrutil.c	/^png_crc_read(png_structp png_ptr, png_bytep buf, png_size_t length)$/;"	f
png_create_info_struct	png.c	/^png_create_info_struct(png_structp png_ptr)$/;"	f
png_create_read_struct	pngread.c	/^png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr,$/;"	f
png_create_read_struct_2	pngread.c	/^png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,$/;"	f
png_create_struct	pngmem.c	/^png_create_struct(int type)$/;"	f
png_create_struct_2	pngmem.c	/^png_create_struct_2(int type, png_malloc_ptr malloc_fn, png_voidp mem_ptr)$/;"	f
png_data_freer	png.c	/^png_data_freer(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_debug	pngpriv.h	858;"	d
png_debug	pngpriv.h	878;"	d
png_debug	pngpriv.h	903;"	d
png_debug	pngpriv.h	942;"	d
png_debug1	pngpriv.h	861;"	d
png_debug1	pngpriv.h	886;"	d
png_debug1	pngpriv.h	914;"	d
png_debug1	pngpriv.h	945;"	d
png_debug2	pngpriv.h	864;"	d
png_debug2	pngpriv.h	894;"	d
png_debug2	pngpriv.h	925;"	d
png_debug2	pngpriv.h	948;"	d
png_decompress_chunk	pngrutil.c	/^png_decompress_chunk(png_structp png_ptr, int comp_type,$/;"	f
png_default_error	pngerror.c	/^png_default_error(png_structp png_ptr, png_const_charp error_message)$/;"	f	file:
png_default_read_data	pngrio.c	/^png_default_read_data(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f
png_default_read_data	pngrio.c	/^png_default_read_data(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f	file:
png_default_warning	pngerror.c	/^png_default_warning(png_structp png_ptr, png_const_charp warning_message)$/;"	f	file:
png_destroy_info_struct	png.c	/^png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr)$/;"	f
png_destroy_read_struct	pngread.c	/^png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr,$/;"	f
png_destroy_struct	pngmem.c	/^png_destroy_struct(png_voidp struct_ptr)$/;"	f
png_destroy_struct_2	pngmem.c	/^png_destroy_struct_2(png_voidp struct_ptr, png_free_ptr free_fn,$/;"	f
png_digit	pngerror.c	/^static PNG_CONST char png_digit[16] = {$/;"	v	file:
png_do_background	pngrtran.c	/^png_do_background(png_row_infop row_info, png_bytep row,$/;"	f
png_do_bgr	pngtrans.c	/^png_do_bgr(png_row_infop row_info, png_bytep row)$/;"	f
png_do_chop	pngrtran.c	/^png_do_chop(png_row_infop row_info, png_bytep row)$/;"	f
png_do_expand	pngrtran.c	/^png_do_expand(png_row_infop row_info, png_bytep row,$/;"	f
png_do_expand_palette	pngrtran.c	/^png_do_expand_palette(png_row_infop row_info, png_bytep row,$/;"	f
png_do_gamma	pngrtran.c	/^png_do_gamma(png_row_infop row_info, png_bytep row,$/;"	f
png_do_gray_to_rgb	pngrtran.c	/^png_do_gray_to_rgb(png_row_infop row_info, png_bytep row)$/;"	f
png_do_invert	pngtrans.c	/^png_do_invert(png_row_infop row_info, png_bytep row)$/;"	f
png_do_packswap	pngtrans.c	/^png_do_packswap(png_row_infop row_info, png_bytep row)$/;"	f
png_do_quantize	pngrtran.c	/^png_do_quantize(png_row_infop row_info, png_bytep row,$/;"	f
png_do_read_filler	pngrtran.c	/^png_do_read_filler(png_row_infop row_info, png_bytep row,$/;"	f
png_do_read_interlace	pngrutil.c	/^png_do_read_interlace(png_structp png_ptr)$/;"	f
png_do_read_intrapixel	pngrtran.c	/^png_do_read_intrapixel(png_row_infop row_info, png_bytep row)$/;"	f
png_do_read_invert_alpha	pngrtran.c	/^png_do_read_invert_alpha(png_row_infop row_info, png_bytep row)$/;"	f
png_do_read_swap_alpha	pngrtran.c	/^png_do_read_swap_alpha(png_row_infop row_info, png_bytep row)$/;"	f
png_do_read_transformations	pngrtran.c	/^png_do_read_transformations(png_structp png_ptr)$/;"	f
png_do_rgb_to_gray	pngrtran.c	/^png_do_rgb_to_gray(png_structp png_ptr, png_row_infop row_info, png_bytep row)$/;"	f
png_do_strip_filler	pngtrans.c	/^png_do_strip_filler(png_row_infop row_info, png_bytep row, png_uint_32 flags)$/;"	f
png_do_swap	pngtrans.c	/^png_do_swap(png_row_infop row_info, png_bytep row)$/;"	f
png_do_unpack	pngrtran.c	/^png_do_unpack(png_row_infop row_info, png_bytep row)$/;"	f
png_do_unshift	pngrtran.c	/^png_do_unshift(png_row_infop row_info, png_bytep row, png_color_8p sig_bits)$/;"	f
png_doublep	pngconf.h	/^typedef double          FAR * png_doublep;$/;"	t
png_doublepp	pngconf.h	/^typedef double          FAR * FAR * png_doublepp;$/;"	t
png_dsort	pngrtran.c	/^} png_dsort;$/;"	t	typeref:struct:png_dsort_struct	file:
png_dsort_struct	pngrtran.c	/^typedef struct png_dsort_struct$/;"	s	file:
png_dsortp	pngrtran.c	/^typedef png_dsort FAR *       png_dsortp;$/;"	t	file:
png_dsortpp	pngrtran.c	/^typedef png_dsort FAR * FAR * png_dsortpp;$/;"	t	file:
png_err	pngerror.c	/^png_err(png_structp png_ptr)$/;"	f
png_error	pngerror.c	/^png_error(png_structp png_ptr, png_const_charp error_message)$/;"	f
png_error_ptr	png.h	/^typedef void (PNGAPI *png_error_ptr) PNGARG((png_structp, png_const_charp));$/;"	t
png_fixed_point	pngconf.h	/^typedef png_int_32 png_fixed_point;$/;"	t
png_fixed_point_p	pngconf.h	/^typedef png_fixed_point FAR * png_fixed_point_p;$/;"	t
png_fixed_point_pp	pngconf.h	/^typedef png_fixed_point FAR * FAR * png_fixed_point_pp;$/;"	t
png_flush_ptr	png.h	/^typedef void (PNGAPI *png_flush_ptr) PNGARG((png_structp));$/;"	t
png_format_buffer	pngerror.c	/^png_format_buffer(png_structp png_ptr, png_charp buffer, png_const_charp$/;"	f	file:
png_free	pngmem.c	/^png_free(png_structp png_ptr, png_voidp ptr)$/;"	f
png_free_data	png.c	/^png_free_data(png_structp png_ptr, png_infop info_ptr, png_uint_32 mask,$/;"	f
png_free_default	pngmem.c	/^png_free_default(png_structp png_ptr, png_voidp ptr)$/;"	f
png_free_ptr	png.h	/^typedef void (*png_free_ptr) PNGARG((png_structp, png_voidp));$/;"	t
png_gamma_shift	pngrtran.c	/^static PNG_CONST int png_gamma_shift[] =$/;"	v	file:
png_get_IHDR	pngget.c	/^png_get_IHDR(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_PLTE	pngget.c	/^png_get_PLTE(png_structp png_ptr, png_infop info_ptr, png_colorp *palette,$/;"	f
png_get_bKGD	pngget.c	/^png_get_bKGD(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_bit_depth	pngget.c	/^png_get_bit_depth(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_cHRM	pngget.c	/^png_get_cHRM(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_cHRM_fixed	pngget.c	/^png_get_cHRM_fixed(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_channels	pngget.c	/^png_get_channels(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_chunk_cache_max	pngget.c	/^png_get_chunk_cache_max(png_structp png_ptr)$/;"	f
png_get_chunk_malloc_max	pngget.c	/^png_get_chunk_malloc_max(png_structp png_ptr)$/;"	f
png_get_color_type	pngget.c	/^png_get_color_type(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_compression_buffer_size	pngget.c	/^png_get_compression_buffer_size(png_structp png_ptr)$/;"	f
png_get_compression_type	pngget.c	/^png_get_compression_type(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_copyright	png.c	/^png_get_copyright(png_structp png_ptr)$/;"	f
png_get_error_ptr	pngerror.c	/^png_get_error_ptr(png_structp png_ptr)$/;"	f
png_get_filter_type	pngget.c	/^png_get_filter_type(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_gAMA	pngget.c	/^png_get_gAMA(png_structp png_ptr, png_infop info_ptr, double *file_gamma)$/;"	f
png_get_gAMA_fixed	pngget.c	/^png_get_gAMA_fixed(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_hIST	pngget.c	/^png_get_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_16p *hist)$/;"	f
png_get_header_ver	png.c	/^png_get_header_ver(png_structp png_ptr)$/;"	f
png_get_header_version	png.c	/^png_get_header_version(png_structp png_ptr)$/;"	f
png_get_iCCP	pngget.c	/^png_get_iCCP(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_image_height	pngget.c	/^png_get_image_height(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_image_width	pngget.c	/^png_get_image_width(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_int_32	png.h	2672;"	d
png_get_int_32	pngrutil.c	/^png_get_int_32)(png_bytep buf)$/;"	f
png_get_interlace_type	pngget.c	/^png_get_interlace_type(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_io_chunk_name	pngget.c	/^png_get_io_chunk_name(png_structp png_ptr)$/;"	f
png_get_io_ptr	png.c	/^png_get_io_ptr(png_structp png_ptr)$/;"	f
png_get_io_state	pngget.c	/^png_get_io_state(png_structp png_ptr)$/;"	f
png_get_libpng_ver	png.c	/^png_get_libpng_ver(png_structp png_ptr)$/;"	f
png_get_mem_ptr	pngmem.c	/^png_get_mem_ptr(png_structp png_ptr)$/;"	f
png_get_oFFs	pngget.c	/^png_get_oFFs(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_pCAL	pngget.c	/^png_get_pCAL(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_pHYs	pngget.c	/^png_get_pHYs(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_pHYs_dpi	pngget.c	/^png_get_pHYs_dpi(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_pixel_aspect_ratio	pngget.c	/^png_get_pixel_aspect_ratio(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_pixels_per_inch	pngget.c	/^png_get_pixels_per_inch(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_pixels_per_meter	pngget.c	/^png_get_pixels_per_meter(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_rgb_to_gray_status	pngget.c	/^png_get_rgb_to_gray_status(png_structp png_ptr)$/;"	f
png_get_rowbytes	pngget.c	/^png_get_rowbytes(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_rows	pngget.c	/^png_get_rows(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_sBIT	pngget.c	/^png_get_sBIT(png_structp png_ptr, png_infop info_ptr, png_color_8p *sig_bit)$/;"	f
png_get_sCAL	pngget.c	/^png_get_sCAL(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_sCAL_s	pngget.c	/^png_get_sCAL_s(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_sPLT	pngget.c	/^png_get_sPLT(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_sRGB	pngget.c	/^png_get_sRGB(png_structp png_ptr, png_infop info_ptr, int *file_srgb_intent)$/;"	f
png_get_signature	pngget.c	/^png_get_signature(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_tIME	pngget.c	/^png_get_tIME(png_structp png_ptr, png_infop info_ptr, png_timep *mod_time)$/;"	f
png_get_tRNS	pngget.c	/^png_get_tRNS(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_text	pngget.c	/^png_get_text(png_structp png_ptr, png_infop info_ptr, png_textp *text_ptr,$/;"	f
png_get_uint_16	png.h	2667;"	d
png_get_uint_16	pngrutil.c	/^png_get_uint_16)(png_bytep buf)$/;"	f
png_get_uint_31	pngrutil.c	/^png_get_uint_31(png_structp png_ptr, png_bytep buf)$/;"	f
png_get_uint_32	png.h	2652;"	d
png_get_uint_32	pngrutil.c	/^png_get_uint_32)(png_bytep buf)$/;"	f
png_get_unknown_chunks	pngget.c	/^png_get_unknown_chunks(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_get_user_chunk_ptr	pngget.c	/^png_get_user_chunk_ptr(png_structp png_ptr)$/;"	f
png_get_user_height_max	pngget.c	/^png_get_user_height_max(png_structp png_ptr)$/;"	f
png_get_user_transform_ptr	pngtrans.c	/^png_get_user_transform_ptr(png_structp png_ptr)$/;"	f
png_get_user_width_max	pngget.c	/^png_get_user_width_max(png_structp png_ptr)$/;"	f
png_get_valid	pngget.c	/^png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag)$/;"	f
png_get_x_offset_inches	pngget.c	/^png_get_x_offset_inches(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_x_offset_microns	pngget.c	/^png_get_x_offset_microns(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_x_offset_pixels	pngget.c	/^png_get_x_offset_pixels(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_x_pixels_per_inch	pngget.c	/^png_get_x_pixels_per_inch(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_x_pixels_per_meter	pngget.c	/^png_get_x_pixels_per_meter(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_y_offset_inches	pngget.c	/^png_get_y_offset_inches(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_y_offset_microns	pngget.c	/^png_get_y_offset_microns(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_y_offset_pixels	pngget.c	/^png_get_y_offset_pixels(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_y_pixels_per_inch	pngget.c	/^png_get_y_pixels_per_inch(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_get_y_pixels_per_meter	pngget.c	/^png_get_y_pixels_per_meter(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_handle_IEND	pngrutil.c	/^png_handle_IEND(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_IHDR	pngrutil.c	/^png_handle_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_PLTE	pngrutil.c	/^png_handle_PLTE(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_as_unknown	png.c	/^png_handle_as_unknown(png_structp png_ptr, png_bytep chunk_name)$/;"	f
png_handle_bKGD	pngrutil.c	/^png_handle_bKGD(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_cHRM	pngrutil.c	/^png_handle_cHRM(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_gAMA	pngrutil.c	/^png_handle_gAMA(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_hIST	pngrutil.c	/^png_handle_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_iCCP	pngrutil.c	/^png_handle_iCCP(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_iTXt	pngrutil.c	/^png_handle_iTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_oFFs	pngrutil.c	/^png_handle_oFFs(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_pCAL	pngrutil.c	/^png_handle_pCAL(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_pHYs	pngrutil.c	/^png_handle_pHYs(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_sBIT	pngrutil.c	/^png_handle_sBIT(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_sCAL	pngrutil.c	/^png_handle_sCAL(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_sPLT	pngrutil.c	/^png_handle_sPLT(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_sRGB	pngrutil.c	/^png_handle_sRGB(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_tEXt	pngrutil.c	/^png_handle_tEXt(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_tIME	pngrutil.c	/^png_handle_tIME(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_tRNS	pngrutil.c	/^png_handle_tRNS(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_unknown	pngrutil.c	/^png_handle_unknown(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_handle_zTXt	pngrutil.c	/^png_handle_zTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)$/;"	f
png_inflate	pngrutil.c	/^png_inflate(png_structp png_ptr, const png_byte *data, png_size_t size,$/;"	f	file:
png_info	png.h	/^} png_info;$/;"	t	typeref:struct:png_info_struct
png_info_destroy	png.c	/^png_info_destroy(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_info_init_3	png.c	/^png_info_init_3(png_infopp ptr_ptr, png_size_t png_info_struct_size)$/;"	f
png_info_struct	png.h	/^typedef struct png_info_struct$/;"	s
png_infop	png.h	/^typedef png_info FAR * png_infop;$/;"	t
png_infopp	png.h	/^typedef png_info FAR * FAR * png_infopp;$/;"	t
png_init_io	png.c	/^png_init_io(png_structp png_ptr, png_FILE_p fp)$/;"	f
png_init_read_transformations	pngrtran.c	/^png_init_read_transformations(png_structp png_ptr)$/;"	f
png_int_16	pngconf.h	/^typedef short png_int_16;$/;"	t
png_int_16p	pngconf.h	/^typedef png_int_16      FAR * png_int_16p;$/;"	t
png_int_16pp	pngconf.h	/^typedef png_int_16      FAR * FAR * png_int_16pp;$/;"	t
png_int_32	pngconf.h	/^typedef int png_int_32;$/;"	t
png_int_32	pngconf.h	/^typedef long png_int_32;$/;"	t
png_int_32p	pngconf.h	/^typedef png_int_32      FAR * png_int_32p;$/;"	t
png_int_32pp	pngconf.h	/^typedef png_int_32      FAR * FAR * png_int_32pp;$/;"	t
png_jmpbuf	png.h	1550;"	d
png_jmpbuf	png.h	1553;"	d
png_libpng_ver	png.h	456;"	d
png_longjmp_ptr	png.h	/^typedef void (PNGAPI *png_longjmp_ptr) PNGARG((jmp_buf, int));$/;"	t
png_malloc	pngmem.c	/^png_malloc(png_structp png_ptr, png_alloc_size_t size)$/;"	f
png_malloc_default	pngmem.c	/^png_malloc_default(png_structp png_ptr, png_alloc_size_t size)$/;"	f
png_malloc_ptr	png.h	/^typedef png_voidp (*png_malloc_ptr) PNGARG((png_structp, png_alloc_size_t));$/;"	t
png_malloc_warn	pngmem.c	/^png_malloc_warn(png_structp png_ptr, png_alloc_size_t size)$/;"	f
png_memcmp	pngconf.h	1459;"	d
png_memcmp	pngconf.h	1471;"	d
png_memcmp	pngconf.h	1481;"	d
png_memcpy	pngconf.h	1460;"	d
png_memcpy	pngconf.h	1472;"	d
png_memcpy	pngconf.h	1482;"	d
png_memset	pngconf.h	1461;"	d
png_memset	pngconf.h	1473;"	d
png_memset	pngconf.h	1483;"	d
png_permit_mng_features	pngset.c	/^png_permit_mng_features(png_structp png_ptr, png_uint_32 mng_features)$/;"	f
png_progressive_end_ptr	png.h	/^typedef void (PNGAPI *png_progressive_end_ptr) PNGARG((png_structp, png_infop));$/;"	t
png_progressive_info_ptr	png.h	/^typedef void (PNGAPI *png_progressive_info_ptr) PNGARG((png_structp,$/;"	t
png_progressive_row_ptr	png.h	/^typedef void (PNGAPI *png_progressive_row_ptr) PNGARG((png_structp, png_bytep,$/;"	t
png_read_chunk_header	pngrutil.c	/^png_read_chunk_header(png_structp png_ptr)$/;"	f
png_read_data	pngrio.c	/^png_read_data(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f
png_read_destroy	pngread.c	/^png_read_destroy(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_read_end	pngread.c	/^png_read_end(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_read_filter_row	pngrutil.c	/^png_read_filter_row(png_structp png_ptr, png_row_infop row_info, png_bytep row,$/;"	f
png_read_finish_row	pngrutil.c	/^png_read_finish_row(png_structp png_ptr)$/;"	f
png_read_image	pngread.c	/^png_read_image(png_structp png_ptr, png_bytepp image)$/;"	f
png_read_info	pngread.c	/^png_read_info(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_read_png	pngread.c	/^png_read_png(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_read_row	pngread.c	/^png_read_row(png_structp png_ptr, png_bytep row, png_bytep dsp_row)$/;"	f
png_read_rows	pngread.c	/^png_read_rows(png_structp png_ptr, png_bytepp row,$/;"	f
png_read_sig	pngrutil.c	/^png_read_sig(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_read_start_row	pngrutil.c	/^png_read_start_row(png_structp png_ptr)$/;"	f
png_read_status_ptr	png.h	/^typedef void (PNGAPI *png_read_status_ptr) PNGARG((png_structp, png_uint_32,$/;"	t
png_read_transform_info	pngrtran.c	/^png_read_transform_info(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_read_update_info	pngread.c	/^png_read_update_info(png_structp png_ptr, png_infop info_ptr)$/;"	f
png_reset_crc	png.c	/^png_reset_crc(png_structp png_ptr)$/;"	f
png_reset_zstream	png.c	/^png_reset_zstream(png_structp png_ptr)$/;"	f
png_row_info	png.h	/^} png_row_info;$/;"	t	typeref:struct:png_row_info_struct
png_row_info_struct	png.h	/^typedef struct png_row_info_struct$/;"	s
png_row_infop	png.h	/^typedef png_row_info FAR * png_row_infop;$/;"	t
png_row_infopp	png.h	/^typedef png_row_info FAR * FAR * png_row_infopp;$/;"	t
png_rw_ptr	png.h	/^typedef void (PNGAPI *png_rw_ptr) PNGARG((png_structp, png_bytep, png_size_t));$/;"	t
png_sPLT_entry	png.h	/^} png_sPLT_entry;$/;"	t	typeref:struct:png_sPLT_entry_struct
png_sPLT_entry_struct	png.h	/^typedef struct png_sPLT_entry_struct$/;"	s
png_sPLT_entryp	png.h	/^typedef png_sPLT_entry FAR * png_sPLT_entryp;$/;"	t
png_sPLT_entrypp	png.h	/^typedef png_sPLT_entry FAR * FAR * png_sPLT_entrypp;$/;"	t
png_sPLT_struct	png.h	/^typedef struct png_sPLT_struct$/;"	s
png_sPLT_t	png.h	/^} png_sPLT_t;$/;"	t	typeref:struct:png_sPLT_struct
png_sPLT_tp	png.h	/^typedef png_sPLT_t FAR * png_sPLT_tp;$/;"	t
png_sPLT_tpp	png.h	/^typedef png_sPLT_t FAR * FAR * png_sPLT_tpp;$/;"	t
png_set_IHDR	pngset.c	/^png_set_IHDR(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_PLTE	pngset.c	/^png_set_PLTE(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_add_alpha	pngtrans.c	/^png_set_add_alpha(png_structp png_ptr, png_uint_32 filler, int filler_loc)$/;"	f
png_set_bKGD	pngset.c	/^png_set_bKGD(png_structp png_ptr, png_infop info_ptr, png_color_16p background)$/;"	f
png_set_background	pngrtran.c	/^png_set_background(png_structp png_ptr,$/;"	f
png_set_benign_errors	pngset.c	/^png_set_benign_errors(png_structp png_ptr, int allowed)$/;"	f
png_set_bgr	pngtrans.c	/^png_set_bgr(png_structp png_ptr)$/;"	f
png_set_cHRM	pngset.c	/^png_set_cHRM(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_cHRM_fixed	pngset.c	/^png_set_cHRM_fixed(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_chunk_cache_max	pngset.c	/^png_set_chunk_cache_max(png_structp png_ptr,$/;"	f
png_set_chunk_malloc_max	pngset.c	/^png_set_chunk_malloc_max(png_structp png_ptr,$/;"	f
png_set_compression_buffer_size	pngset.c	/^png_set_compression_buffer_size(png_structp png_ptr,$/;"	f
png_set_crc_action	pngrtran.c	/^png_set_crc_action(png_structp png_ptr, int crit_action, int ancil_action)$/;"	f
png_set_dither	png.h	1746;"	d
png_set_error_fn	pngerror.c	/^png_set_error_fn(png_structp png_ptr, png_voidp error_ptr,$/;"	f
png_set_expand	pngrtran.c	/^png_set_expand(png_structp png_ptr)$/;"	f
png_set_expand_gray_1_2_4_to_8	pngrtran.c	/^png_set_expand_gray_1_2_4_to_8(png_structp png_ptr)$/;"	f
png_set_filler	pngtrans.c	/^png_set_filler(png_structp png_ptr, png_uint_32 filler, int filler_loc)$/;"	f
png_set_gAMA	pngset.c	/^png_set_gAMA(png_structp png_ptr, png_infop info_ptr, double file_gamma)$/;"	f
png_set_gAMA_fixed	pngset.c	/^png_set_gAMA_fixed(png_structp png_ptr, png_infop info_ptr, png_fixed_point$/;"	f
png_set_gamma	pngrtran.c	/^png_set_gamma(png_structp png_ptr, double scrn_gamma, double file_gamma)$/;"	f
png_set_gray_to_rgb	pngrtran.c	/^png_set_gray_to_rgb(png_structp png_ptr)$/;"	f
png_set_hIST	pngset.c	/^png_set_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_16p hist)$/;"	f
png_set_iCCP	pngset.c	/^png_set_iCCP(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_interlace_handling	pngtrans.c	/^png_set_interlace_handling(png_structp png_ptr)$/;"	f
png_set_invalid	pngset.c	/^png_set_invalid(png_structp png_ptr, png_infop info_ptr, int mask)$/;"	f
png_set_invert_alpha	pngtrans.c	/^png_set_invert_alpha(png_structp png_ptr)$/;"	f
png_set_invert_mono	pngtrans.c	/^png_set_invert_mono(png_structp png_ptr)$/;"	f
png_set_keep_unknown_chunks	pngset.c	/^png_set_keep_unknown_chunks(png_structp png_ptr, int keep, png_bytep$/;"	f
png_set_longjmp_fn	pngerror.c	/^png_set_longjmp_fn(png_structp png_ptr, png_longjmp_ptr longjmp_fn,$/;"	f
png_set_mem_fn	pngmem.c	/^png_set_mem_fn(png_structp png_ptr, png_voidp mem_ptr, png_malloc_ptr$/;"	f
png_set_oFFs	pngset.c	/^png_set_oFFs(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_pCAL	pngset.c	/^png_set_pCAL(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_pHYs	pngset.c	/^png_set_pHYs(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_packing	pngtrans.c	/^png_set_packing(png_structp png_ptr)$/;"	f
png_set_packswap	pngtrans.c	/^png_set_packswap(png_structp png_ptr)$/;"	f
png_set_palette_to_rgb	pngrtran.c	/^png_set_palette_to_rgb(png_structp png_ptr)$/;"	f
png_set_quantize	pngrtran.c	/^png_set_quantize(png_structp png_ptr, png_colorp palette,$/;"	f
png_set_read_fn	pngrio.c	/^png_set_read_fn(png_structp png_ptr, png_voidp io_ptr,$/;"	f
png_set_read_status_fn	pngread.c	/^png_set_read_status_fn(png_structp png_ptr, png_read_status_ptr read_row_fn)$/;"	f
png_set_read_user_chunk_fn	pngset.c	/^png_set_read_user_chunk_fn(png_structp png_ptr, png_voidp user_chunk_ptr,$/;"	f
png_set_read_user_transform_fn	pngrtran.c	/^png_set_read_user_transform_fn(png_structp png_ptr, png_user_transform_ptr$/;"	f
png_set_rgb_to_gray	pngrtran.c	/^png_set_rgb_to_gray(png_structp png_ptr, int error_action, double red,$/;"	f
png_set_rgb_to_gray_fixed	pngrtran.c	/^png_set_rgb_to_gray_fixed(png_structp png_ptr, int error_action,$/;"	f
png_set_rows	pngset.c	/^png_set_rows(png_structp png_ptr, png_infop info_ptr, png_bytepp row_pointers)$/;"	f
png_set_sBIT	pngset.c	/^png_set_sBIT(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_sCAL	pngset.c	/^png_set_sCAL(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_sCAL_s	pngset.c	/^png_set_sCAL_s(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_sPLT	pngset.c	/^png_set_sPLT(png_structp png_ptr,$/;"	f
png_set_sRGB	pngset.c	/^png_set_sRGB(png_structp png_ptr, png_infop info_ptr, int intent)$/;"	f
png_set_sRGB_gAMA_and_cHRM	pngset.c	/^png_set_sRGB_gAMA_and_cHRM(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_shift	pngtrans.c	/^png_set_shift(png_structp png_ptr, png_color_8p true_bits)$/;"	f
png_set_sig_bytes	png.c	/^png_set_sig_bytes(png_structp png_ptr, int num_bytes)$/;"	f
png_set_strip_16	pngrtran.c	/^png_set_strip_16(png_structp png_ptr)$/;"	f
png_set_strip_alpha	pngrtran.c	/^png_set_strip_alpha(png_structp png_ptr)$/;"	f
png_set_strip_error_numbers	pngerror.c	/^png_set_strip_error_numbers(png_structp png_ptr, png_uint_32 strip_mode)$/;"	f
png_set_swap	pngtrans.c	/^png_set_swap(png_structp png_ptr)$/;"	f
png_set_swap_alpha	pngtrans.c	/^png_set_swap_alpha(png_structp png_ptr)$/;"	f
png_set_tIME	pngset.c	/^png_set_tIME(png_structp png_ptr, png_infop info_ptr, png_timep mod_time)$/;"	f
png_set_tRNS	pngset.c	/^png_set_tRNS(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_tRNS_to_alpha	pngrtran.c	/^png_set_tRNS_to_alpha(png_structp png_ptr)$/;"	f
png_set_text	pngset.c	/^png_set_text(png_structp png_ptr, png_infop info_ptr, png_textp text_ptr,$/;"	f
png_set_text_2	pngset.c	/^png_set_text_2(png_structp png_ptr, png_infop info_ptr, png_textp text_ptr,$/;"	f
png_set_unknown_chunk_location	pngset.c	/^png_set_unknown_chunk_location(png_structp png_ptr, png_infop info_ptr,$/;"	f
png_set_unknown_chunks	pngset.c	/^png_set_unknown_chunks(png_structp png_ptr,$/;"	f
png_set_user_limits	pngset.c	/^png_set_user_limits(png_structp png_ptr, png_uint_32 user_width_max,$/;"	f
png_set_user_transform_info	pngtrans.c	/^png_set_user_transform_info(png_structp png_ptr, png_voidp$/;"	f
png_sig_cmp	png.c	/^png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check)$/;"	f
png_size_t	pngconf.h	/^   typedef size_t png_size_t;$/;"	t
png_size_t	pngconf.h	/^   typedef unsigned int png_size_t;$/;"	t
png_sizeof	pngconf.h	1139;"	d
png_snprintf	pngconf.h	1490;"	d
png_snprintf	pngconf.h	1494;"	d
png_snprintf	pngconf.h	1505;"	d
png_snprintf2	pngconf.h	1491;"	d
png_snprintf2	pngconf.h	1495;"	d
png_snprintf2	pngconf.h	1506;"	d
png_snprintf6	pngconf.h	1492;"	d
png_snprintf6	pngconf.h	1496;"	d
png_snprintf6	pngconf.h	1507;"	d
png_sprintf	pngconf.h	1462;"	d
png_sprintf	pngconf.h	1474;"	d
png_sprintf	pngconf.h	1484;"	d
png_start_read_image	pngread.c	/^png_start_read_image(png_structp png_ptr)$/;"	f
png_strcpy	pngconf.h	1456;"	d
png_strcpy	pngconf.h	1468;"	d
png_strcpy	pngconf.h	1478;"	d
png_strlen	pngconf.h	1458;"	d
png_strlen	pngconf.h	1470;"	d
png_strlen	pngconf.h	1480;"	d
png_strncpy	pngconf.h	1457;"	d
png_strncpy	pngconf.h	1469;"	d
png_strncpy	pngconf.h	1479;"	d
png_strtod	pngrutil.c	22;"	d	file:
png_struct	png.h	/^typedef struct png_struct_def png_struct;$/;"	t	typeref:struct:png_struct_def
png_struct_def	png.h	/^struct png_struct_def$/;"	s
png_structp	png.h	/^typedef png_struct FAR * png_structp;$/;"	t
png_structpp	png.h	/^typedef png_struct FAR * FAR * png_structpp;$/;"	t
png_text	png.h	/^} png_text;$/;"	t	typeref:struct:png_text_struct
png_text_struct	png.h	/^typedef struct png_text_struct$/;"	s
png_textp	png.h	/^typedef png_text FAR * png_textp;$/;"	t
png_textpp	png.h	/^typedef png_text FAR * FAR * png_textpp;$/;"	t
png_time	png.h	/^} png_time;$/;"	t	typeref:struct:png_time_struct
png_time_struct	png.h	/^typedef struct png_time_struct$/;"	s
png_timep	png.h	/^typedef png_time FAR * png_timep;$/;"	t
png_timepp	png.h	/^typedef png_time FAR * FAR * png_timepp;$/;"	t
png_uint_16	pngconf.h	/^typedef unsigned short png_uint_16;$/;"	t
png_uint_16p	pngconf.h	/^typedef png_uint_16     FAR * png_uint_16p;$/;"	t
png_uint_16pp	pngconf.h	/^typedef png_uint_16     FAR * FAR * png_uint_16pp;$/;"	t
png_uint_32	pngconf.h	/^typedef unsigned int png_uint_32;$/;"	t
png_uint_32	pngconf.h	/^typedef unsigned long png_uint_32;$/;"	t
png_uint_32p	pngconf.h	/^typedef png_uint_32     FAR * png_uint_32p;$/;"	t
png_uint_32pp	pngconf.h	/^typedef png_uint_32     FAR * FAR * png_uint_32pp;$/;"	t
png_unknown_chunk	png.h	/^png_unknown_chunk;$/;"	t	typeref:struct:png_unknown_chunk_t
png_unknown_chunk_ptr	png.h	/^typedef void (PNGAPI *png_unknown_chunk_ptr) PNGARG((png_structp));$/;"	t
png_unknown_chunk_t	png.h	/^typedef struct png_unknown_chunk_t$/;"	s
png_unknown_chunkp	png.h	/^typedef png_unknown_chunk FAR * png_unknown_chunkp;$/;"	t
png_unknown_chunkpp	png.h	/^typedef png_unknown_chunk FAR * FAR * png_unknown_chunkpp;$/;"	t
png_user_chunk_ptr	png.h	/^typedef int (PNGAPI *png_user_chunk_ptr) PNGARG((png_structp,$/;"	t
png_user_transform_ptr	png.h	/^typedef void (PNGAPI *png_user_transform_ptr) PNGARG((png_structp,$/;"	t
png_voidp	pngconf.h	/^typedef void            FAR * png_voidp;$/;"	t
png_warning	pngerror.c	/^png_warning(png_structp png_ptr, png_const_charp warning_message)$/;"	f
png_write_status_ptr	png.h	/^typedef void (PNGAPI *png_write_status_ptr) PNGARG((png_structp, png_uint_32,$/;"	t
png_zalloc	png.c	/^png_zalloc(voidpf png_ptr, uInt items, uInt size)$/;"	f
png_zfree	png.c	/^png_zfree(voidpf png_ptr, voidpf ptr)$/;"	f
red	png.h	/^   png_byte red;   \/* for use in red green blue files *\/$/;"	m	struct:png_color_8_struct
red	png.h	/^   png_byte red;$/;"	m	struct:png_color_struct
red	png.h	/^   png_uint_16 red;   \/* for use in red green blue files *\/$/;"	m	struct:png_color_16_struct
red	png.h	/^   png_uint_16 red;$/;"	m	struct:png_sPLT_entry_struct
right	pngrtran.c	/^   png_byte right;$/;"	m	struct:png_dsort_struct	file:
rowbytes	png.h	/^   png_size_t rowbytes; \/* number of bytes in row *\/$/;"	m	struct:png_row_info_struct
second	png.h	/^   png_byte second;  \/* second of minute, 0 - 60 (for leap seconds) *\/$/;"	m	struct:png_time_struct
size	png.h	/^    png_size_t size;$/;"	m	struct:png_unknown_chunk_t
text	png.h	/^   png_charp text;         \/* comment, may be an empty string (ie "")$/;"	m	struct:png_text_struct
text_length	png.h	/^   png_size_t text_length; \/* length of the text string *\/$/;"	m	struct:png_text_struct
twobppswaptable	pngtrans.c	/^static PNG_CONST png_byte twobppswaptable[256] = {$/;"	v	file:
version_1_4_5	png.h	/^typedef png_structp version_1_4_5;$/;"	t
width	png.h	/^   png_uint_32 width; \/* width of row *\/$/;"	m	struct:png_row_info_struct
year	png.h	/^   png_uint_16 year; \/* full year, as in, 1995 *\/$/;"	m	struct:png_time_struct
